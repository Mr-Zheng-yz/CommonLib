package com.baize.common_lib.utils;import android.content.Context;import android.media.AudioManager;import com.baize.common_lib.App;import com.ocamara.common_libs.utils.LogUtil;public class AudioUtil {    private AudioManager mAudioManager;    private static volatile AudioUtil mInstance;    private AudioUtil(){        mAudioManager = (AudioManager) App.Companion.getApplication().getSystemService(Context.AUDIO_SERVICE);    }    public synchronized static AudioUtil getInstance(){        if(mInstance == null){            synchronized (AudioUtil.class) {                if (mInstance == null) {                    mInstance = new AudioUtil();                }            }        }        return mInstance;    }    //获取媒体最大音量    public int getMediaMaxVolume(){        return mAudioManager.getStreamMaxVolume( AudioManager.STREAM_MUSIC);    }    //获取媒体音量    public int getMediaVolume(){        return mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);    }    //获取通话最大音量    public int getCallMaxVolume(){        return mAudioManager.getStreamMaxVolume( AudioManager.STREAM_VOICE_CALL );    }    //获取通话音量    public int getCallVolume(){        return mAudioManager.getStreamMaxVolume( AudioManager.STREAM_VOICE_CALL );    }    //设置多媒体音量    public void setMediaVolume(int volume){        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, AudioManager.FLAG_SHOW_UI);    }    //设置通话音量    public void setCallVolume(int volume){        mAudioManager.setStreamVolume(AudioManager.STREAM_VOICE_CALL, volume, AudioManager.FLAG_SHOW_UI);    }    //获取系统音量最大值    public int getSystemMaxVolume(){        return mAudioManager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM );    }    //获取系统音量    public int getSystemVolume(){        return mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM );    }    //获取提示音量最大值    public int getAlermMaxVolume(){        return mAudioManager.getStreamMaxVolume(AudioManager.STREAM_ALARM );    }    //设置通话音量    public void setCallVolume100(int volume){        int maxVolume = getCallMaxVolume();        int realVolume =  (int) (volume / 100f * maxVolume + 0.5f);        LogUtil.d("-----设置通话音量:" + volume + " -> " + realVolume + " max:" + maxVolume);        // 检查是否连接了蓝牙耳机        if (mAudioManager.isBluetoothScoOn()) {            // 设置音量            mAudioManager.setStreamVolume(AudioManager.STREAM_VOICE_CALL, realVolume, AudioManager.FLAG_SHOW_UI);        } else {            mAudioManager.setStreamVolume(AudioManager.STREAM_VOICE_CALL ,realVolume, AudioManager.STREAM_VOICE_CALL);        }    }    // 关闭/打开扬声器播放    public void setSpeakerStatus(boolean on) {        if (on) { //扬声器            mAudioManager.setSpeakerphoneOn(true);            mAudioManager.setMode(AudioManager.MODE_NORMAL);        } else {            // 设置最大音量            int max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_VOICE_CALL);            mAudioManager.setStreamVolume(AudioManager.STREAM_VOICE_CALL, max, AudioManager.STREAM_VOICE_CALL);            // 设置成听筒模式            mAudioManager.setMode(AudioManager.MODE_IN_COMMUNICATION);            mAudioManager.setSpeakerphoneOn(false);// 关闭扬声器            mAudioManager.setRouting(AudioManager.MODE_NORMAL, AudioManager.ROUTE_EARPIECE, AudioManager.ROUTE_ALL);        }    }    public void setMute(boolean isMute) {        if(isMute) {            mAudioManager.adjustVolume(AudioManager.ADJUST_MUTE, 0);        } else {            mAudioManager.adjustVolume(AudioManager.ADJUST_UNMUTE, 0);        }    }    //切换通话音量静音    public void toggleCallVolumeMute(boolean isMute) {        mAudioManager.adjustStreamVolume(AudioManager.STREAM_VOICE_CALL,                isMute ? AudioManager.ADJUST_MUTE : AudioManager.ADJUST_UNMUTE, 0);    }    public boolean isCallVolumeMute() {        return mAudioManager.isStreamMute(AudioManager.STREAM_VOICE_CALL);    }}